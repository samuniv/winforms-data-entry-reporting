{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Setup and Core Dependency Installation",
        "description": "Create the initial .NET 9 WinForms project structure. Install and configure all required NuGet packages including Entity Framework Core with the SQLite provider, ComponentOne for WinForms, and Serilog for logging.",
        "details": "1. Create a new .NET 9 WinForms project in Visual Studio. 2. Add NuGet packages: `Microsoft.EntityFrameworkCore.Sqlite`, `Microsoft.EntityFrameworkCore.Tools`, `C1.Win.C1FlexGrid`, `C1.Win.C1Chart`, `C1.Win.C1Report`, and `Serilog.Sinks.File`. 3. Set up the main solution structure with folders for Models, Repositories, Forms, and Services. 4. Configure `app.config` with a placeholder for the SQLite connection string. 5. Add ComponentOne licensing information to the project as per their documentation.",
        "testStrategy": "Verify that the project compiles successfully. Check that all NuGet packages are correctly referenced and the `licenses.licx` file for ComponentOne is present and configured.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Define EF Core Models and Database Initialization",
        "description": "Define the `Customer` and `Order` data models as C# classes. Set up the `AppDbContext` for Entity Framework Core, and create a `DbInitializer` class to handle database creation, migrations, and initial data seeding on application startup.",
        "details": "1. Create `Customer.cs` and `Order.cs` in the Models folder with properties and data annotations as specified in the PRD (e.g., `[Required]`, `[MaxLength(100)]`). 2. Create `AppDbContext.cs` inheriting from `DbContext`, defining `DbSet<Customer>` and `DbSet<Order>`. Configure relationships and constraints in `OnModelCreating`. 3. Create `DbInitializer.cs` with a static `Initialize(AppDbContext context)` method. This method should call `context.Database.Migrate()` to apply pending migrations. 4. Add logic to seed the database with sample customers and orders if the database is newly created. 5. Call `DbInitializer.Initialize()` in `Program.Main` after setting up the dependency injection container or service locator.",
        "testStrategy": "Run the application and verify that `data.db` is created in the output directory. Use a SQLite browser to inspect the database schema and confirm that tables for Customer and Order exist with the correct columns and that seed data is present. Unit test the entity configurations.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Customer and Order Entity Classes",
            "description": "Create the `Customer` and `Order` C# classes. Add properties like `Id`, `Name`, `Email` for `Customer`, and `Id`, `OrderDate`, `CustomerId` for `Order`. Use data annotations for constraints like `[Required]` and `[MaxLength]`.",
            "dependencies": [],
            "details": "Define the C# classes for Customer and Order entities, including properties and data annotations for validation and database schema generation.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement AppDbContext",
            "description": "Create the `AppDbContext` class inheriting from `DbContext`. Define `DbSet<Customer>` and `DbSet<Order>` properties. Override the `OnModelCreating` method to configure the one-to-many relationship between `Customer` and `Order` using the Fluent API.",
            "dependencies": [
              1
            ],
            "details": "Implement the Entity Framework Core DbContext, define DbSets for the entities, and configure their relationships using the OnModelCreating method.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create Initial EF Core Migration",
            "description": "Use the EF Core command-line tools (e.g., `dotnet ef migrations add InitialCreate`) to generate the first migration. This will create a script based on the `AppDbContext` and entity models to set up the database schema.",
            "dependencies": [
              2
            ],
            "details": "Generate the initial database migration script using EF Core tools based on the defined DbContext and entity models.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Develop and Integrate DbInitializer",
            "description": "Create a static `DbInitializer` class with a method to apply pending migrations (`context.Database.Migrate()`) and seed the database with initial data (e.g., a few sample customers and orders) if it's empty. Call this initializer from the application's startup sequence (e.g., `Program.cs`).",
            "dependencies": [
              3
            ],
            "details": "Create a DbInitializer class to programmatically apply migrations and seed initial data. Integrate this class into the application's startup logic.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement Main Application Shell and Navigation",
        "description": "Develop the main application window (`MainForm`) which will serve as the primary container for all other forms. This includes setting up the menu bar, toolbar, and status bar as defined in the PRD.",
        "details": "1. Design `MainForm.cs` using the WinForms designer. 2. Add a `MenuStrip` with the specified top-level menus: File, Data, Reports, Tools, Help. Populate them with `ToolStripMenuItem`s. 3. Add a `ToolStrip` with buttons for common actions like 'New Customer', 'New Order', 'Save'. Assign icons to the buttons. 4. Add a `StatusStrip` at the bottom to display application status. 5. Use a `TabControl` or an MDI (Multiple Document Interface) container to host child forms like `CustomerForm` and `OrderForm`.",
        "testStrategy": "Launch the application and visually inspect `MainForm`. Click through all menu items to ensure they are present. Verify that toolbar buttons are visible and enabled/disabled appropriately. Ensure the MDI/Tab container is ready to host child forms.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Develop Customer Management Form and Repository",
        "description": "Create the `CustomerForm` for data entry and a corresponding `CustomerRepository` to handle all CRUD (Create, Read, Update, Delete) operations for customer data using EF Core.",
        "details": "1. Design `CustomerForm.cs` with `TextBox` controls for Name, Email, Phone, and Address. Use a `MaskedTextBox` for the phone number. 2. Implement a `CustomerRepository` class that takes an `AppDbContext` instance. Create async methods: `GetByIdAsync`, `GetAllAsync`, `AddAsync`, `UpdateAsync`, `DeleteAsync`. 3. Use a `BindingSource` component on the form to manage the data connection between the UI controls and a list of `Customer` objects. 4. Implement validation logic using the `ErrorProvider` component, triggered on control `Validating` events. Use regex for email validation. 5. On save, call the repository methods within a transaction (`context.Database.BeginTransaction()`).",
        "testStrategy": "Create unit tests for the `CustomerRepository` methods using an in-memory SQLite database. For the UI, perform manual testing: add, edit, and delete a customer. Verify that validation messages appear for invalid data (e.g., empty name, bad email format) and that data is correctly persisted to `data.db`.",
        "priority": "high",
        "dependencies": [
          2,
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design the UI for `CustomerForm`",
            "description": "Create the visual layout for the customer management form, including all necessary input fields (e.g., name, email, address), labels, and action buttons (e.g., Save, Cancel).",
            "dependencies": [],
            "details": "Use the form designer to place and configure controls like TextBox, Label, and Button. Ensure the layout is logical and user-friendly. Name the controls appropriately for easy access in the code-behind.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement the `CustomerRepository` with all async CRUD methods",
            "description": "Develop the data access layer class `CustomerRepository` responsible for interacting with the database. Implement asynchronous methods for Create, Read, Update, and Delete operations on customer data.",
            "dependencies": [],
            "details": "Create methods such as `AddAsync(Customer customer)`, `GetByIdAsync(int id)`, `UpdateAsync(Customer customer)`, and `DeleteAsync(int id)`. This class will abstract all data persistence logic from the UI.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Configure data binding on the `CustomerForm` using `BindingSource`",
            "description": "Connect the UI controls on the `CustomerForm` to a customer data object. Use a `BindingSource` component to act as an intermediary, simplifying the process of displaying and updating data.",
            "dependencies": [
              1
            ],
            "details": "Add a `BindingSource` to the form. Set its `DataSource` to the customer model. For each input control, configure its data bindings in the designer or in code to link control properties (e.g., `Text`) to the properties of the model via the `BindingSource`.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement client-side validation using `ErrorProvider`",
            "description": "Add input validation logic to the `CustomerForm` to ensure data quality before it is sent to the repository. Use the `ErrorProvider` component to give clear, non-intrusive visual feedback to the user about validation errors.",
            "dependencies": [
              1
            ],
            "details": "Add an `ErrorProvider` to the form. Handle the `Validating` event for each input control that requires validation. In the event handler, check the input value and use `errorProvider.SetError(control, \"Error message\")` if it's invalid.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement the save functionality with database transaction",
            "description": "Code the logic for the 'Save' button. This process must trigger form-wide validation, call the correct repository method (Add or Update), and ensure the entire database operation is wrapped in a transaction for atomicity.",
            "dependencies": [
              2,
              3,
              4
            ],
            "details": "In the Save button's click event handler, first call `this.ValidateChildren()` to run all validations. If the form is valid, determine if the customer is new or existing. Call the appropriate `AddAsync` or `UpdateAsync` method from the repository, ensuring the repository method itself manages a `DbTransaction` to commit or roll back the operation.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 5,
        "title": "Develop Order Management Form and Repository",
        "description": "Create the `OrderForm` for entering new orders. This form will include a customer lookup, quantity input, and date selection, along with an `OrderRepository` for data persistence, including soft-delete logic.",
        "details": "1. Design `OrderForm.cs`. Add a `ComboBox` to select a customer, populated from `CustomerRepository.GetAllAsync()`. 2. Use a `NumericUpDown` control for Quantity, setting its `Minimum` to 1 and `Maximum` to 1000. 3. Use a `DateTimePicker` for `OrderDate` and add validation to prevent selecting future dates. 4. Implement an `OrderRepository` class with methods for adding, updating, and soft-deleting orders (setting the `IsDeleted` flag to true instead of removing the row). 5. Implement business rule: disable the 'Save' button if no customers exist in the database.",
        "testStrategy": "Unit test the `OrderRepository`, especially the soft-delete logic. Manually test the `OrderForm`: verify the customer dropdown is populated, quantity and date validation works, and creating/editing an order correctly updates the database, including the `CustomerId` foreign key.",
        "priority": "high",
        "dependencies": [
          2,
          3,
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design the OrderForm UI, including the customer lookup ComboBox",
            "description": "Create the visual layout for the order management form. This includes adding all necessary input fields like Order ID, Order Date, Quantity, and a ComboBox for selecting a customer.",
            "dependencies": [],
            "details": "Use a visual designer or markup language (e.g., XAML, HTML) to lay out the form controls. Include labels, text boxes for order details, a date picker for OrderDate, a numeric input for Quantity, and a ComboBox for customer selection. Add Save and Cancel buttons.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement the OrderRepository with methods for add, update, and soft-delete",
            "description": "Develop the data access layer for orders. This repository will handle all database interactions, including creating new orders, modifying existing ones, and marking orders as deleted without physically removing them from the database.",
            "dependencies": [],
            "details": "Create an `OrderRepository` class. Implement an `Add(Order order)` method for new records, an `Update(Order order)` method for changes, and a `SoftDelete(int orderId)` method that sets an `IsDeleted` flag to true.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement the form logic to populate the customer ComboBox and bind other controls",
            "description": "Write the code-behind or view model logic to connect the UI with the data. This involves fetching the customer list to populate the ComboBox and setting up data binding for other form fields to an Order object.",
            "dependencies": [
              1,
              2
            ],
            "details": "In the form's loading logic, use a customer repository to fetch and bind the list of customers to the ComboBox's item source. Set up two-way data binding for the OrderDate, Quantity, and other fields to properties of an Order model object.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement validation for OrderDate and Quantity",
            "description": "Add validation rules to ensure data integrity. The OrderDate cannot be in the future, and the Quantity must be a positive number.",
            "dependencies": [
              3
            ],
            "details": "Implement validation logic within the data model or form logic. For OrderDate, check if the selected date is greater than the current date. For Quantity, ensure the value is greater than zero. Provide user-friendly error messages for invalid fields.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement the business rule to disable the save button if no customers exist",
            "description": "Implement a specific business rule to prevent users from creating an order if there are no customers in the system to assign it to.",
            "dependencies": [
              3
            ],
            "details": "After populating the customer ComboBox, check if its item count is zero. If it is, set the 'IsEnabled' property of the 'Save' button to false. Optionally, display a message on the form indicating that customers must be added first.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Dashboard with C1FlexGrid and C1Chart",
        "description": "Create a dashboard form that uses ComponentOne controls to visualize data. A `C1FlexGrid` will display order details, and a `C1Chart` will show aggregated data, such as orders per month.",
        "details": "1. Create a `DashboardForm.cs`. Add a `C1FlexGrid` control to the form. 2. Bind the grid to a data source populated by `OrderRepository.GetAllAsync()`. Configure the grid properties: `AllowSorting = true`, `AllowFiltering = true`. Set up `GroupBy` functionality on the 'Customer' column. 3. Add a `C1Chart` control. Write a LINQ query to aggregate data (e.g., `context.Orders.GroupBy(o => o.OrderDate.Month).Select(g => new { Month = g.Key, Count = g.Count() })`). Bind the chart to the result of this query. 4. Implement a static `DataRefreshService` with an event (e.g., `public static event Action OnDataChanged`). Trigger this event after any CUD operation in the repositories. The dashboard will subscribe to this event and reload its data.",
        "testStrategy": "Launch the dashboard and verify the `C1FlexGrid` is populated with order data. Test sorting by clicking column headers and filtering using the built-in filter row. Check that the `C1Chart` displays correct aggregated data. Add a new order and confirm the dashboard refreshes automatically.",
        "priority": "medium",
        "dependencies": [
          4,
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up DashboardForm and C1FlexGrid",
            "description": "Create the main `DashboardForm`, add a `C1FlexGrid` control, and bind it to the raw order data source. Configure the grid's columns, sorting, and filtering capabilities.",
            "dependencies": [],
            "details": "Create the main form for the dashboard. Add the C1FlexGrid control from the ComponentOne suite. Establish a data binding to the primary order dataset. Configure grid properties to enable user-driven sorting by clicking column headers and filtering options for key fields like customer, product, or date.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Develop LINQ Query for Chart Data Aggregation",
            "description": "Write a LINQ (Language-Integrated Query) to process the raw order data. The query should group data by a specific dimension (e.g., month, product category) and calculate aggregate values (e.g., total sales, number of orders).",
            "dependencies": [
              1
            ],
            "details": "Implement a method that takes the raw order collection as input. Use LINQ to group the orders, for example, by month and year. For each group, calculate the sum of the order totals. The query should return a new collection of objects, where each object represents a data point for the chart (e.g., { Month: 'Jan 2023', TotalSales: 50000 }).",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Bind and Configure C1Chart",
            "description": "Add a `C1Chart` control to the `DashboardForm`. Bind its data source to the aggregated data generated by the LINQ query. Configure the chart's appearance, including chart type (e.g., bar, line), axes labels, titles, and legend.",
            "dependencies": [
              2
            ],
            "details": "Place the C1Chart control on the form. Set its DataSource property to the result of the LINQ aggregation query developed in the previous subtask. Map the chart's X-axis to the grouping dimension (e.g., Month) and the Y-axis to the aggregated value (e.g., TotalSales). Customize visual properties like colors, fonts, and chart title to ensure clarity and professional appearance.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement DataRefreshService and Event Subscription",
            "description": "Create a `DataRefreshService` class responsible for periodically fetching new data. This service should expose an `OnDataChanged` event. The `DashboardForm` will subscribe to this event to automatically re-run the data binding and aggregation logic.",
            "dependencies": [
              1,
              3
            ],
            "details": "Create a new service class, `DataRefreshService`, possibly using a timer to trigger data fetches at regular intervals. When new data is available, the service will raise an `OnDataChanged` event. In the `DashboardForm`, create an event handler for this event. The handler will re-fetch the data, re-execute the LINQ query, and re-bind both the C1FlexGrid and C1Chart to reflect the latest information.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Create Reports and Data Exports",
        "description": "Implement reporting and data export functionality. Create report templates using `C1Report` for invoices and summaries, and enable exporting data from `C1FlexGrid` to PDF and Excel formats.",
        "details": "1. Use the C1Report Designer to create two report templates: `Invoice.xml` and `Summary.xml`. 2. In the application, create a `ReportService` that can load a report definition, populate it with data (e.g., a specific order and its customer for an invoice), and render it. 3. Implement a 'Print Invoice' button on the `OrderForm` that calls this service. 4. Implement an 'Export to PDF' function using `C1Report.Render()` and `C1Report.Export(path, C1.C1Report.FormatEnum.PDF)`. 5. Add an 'Export to Excel' button on the dashboard that calls `c1FlexGrid.SaveExcel(path)`. 6. Use `SaveFileDialog` to prompt the user for a file path for all exports.",
        "testStrategy": "Generate a report for a sample order and verify the PDF output matches the template and contains correct data. Export the grid to Excel and check if the file is created correctly with all visible data, columns, and formatting. Test the `SaveFileDialog` interaction.",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Report Templates",
            "description": "Design the `Invoice.xml` and `Summary.xml` report templates using the C1Report Designer.",
            "dependencies": [],
            "details": "Use the standalone C1Report Designer application to create the visual layout, data fields, and groupings for both the detailed invoice and the summary reports. The final output will be two XML definition files that will be embedded in the project.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement ReportService",
            "description": "Implement a `ReportService` to load, populate, and render C1Report definitions.",
            "dependencies": [
              1
            ],
            "details": "Create a new service class responsible for handling all report generation logic. This service will contain methods to load a specified report definition XML, attach a data source (e.g., a DataTable or a list of objects), and render the report into a C1PrintDocument for previewing or exporting.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Integrate PDF Invoice Export",
            "description": "Integrate the `ReportService` to generate and export a PDF invoice.",
            "dependencies": [
              2
            ],
            "details": "Add a button or menu item to the UI that, when clicked, invokes the `ReportService`. The service will be called with the `Invoice.xml` definition and the data for a specific invoice. The resulting rendered report will then be exported to a PDF file, and a file-save dialog will be presented to the user.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Add 'Export to Excel' to FlexGrid",
            "description": "Add 'Export to Excel' functionality to the dashboard's `C1FlexGrid`.",
            "dependencies": [],
            "details": "Implement a new 'Export to Excel' button on the dashboard. This button will trigger the `C1FlexGrid.SaveExcel` method to directly export the grid's current content, including sorting and filtering, into an XLSX file.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement User Preferences and Settings Form",
        "description": "Develop a comprehensive settings form allowing users to customize application preferences. The implementation includes a tabbed interface for Appearance, Paths, and Behavior settings, a dedicated ThemeManager service for robust theme application, and persistence of settings between sessions. Key settings include UI theme (light/dark), default export path, auto-save interval, and window position memory.",
        "status": "done",
        "dependencies": [
          3
        ],
        "priority": "low",
        "details": "1. **Settings Infrastructure:** Use `Properties.Settings.settings` to manage four user-scoped settings: `Theme` (string), `DefaultExportPath` (string), `AutoSaveInterval` (int), and `RememberWindowPosition` (bool).\n2. **ThemeManager Service:** Implement a central `ThemeManager` service to handle dynamic theme application. This service should recursively apply themes to all controls on all open forms, with special handling for various control types like `DataGridView`, `MenuStrip`, etc. Include logging for debugging theme operations.\n3. **SettingsForm UI:** Create a `SettingsForm` with a professional tabbed layout:\n    - **Appearance Tab:** Contains a `ComboBox` for theme selection (Light/Dark).\n    - **Paths Tab:** Features a `TextBox` and a 'Browse' button (opening a folder browser dialog) for the default export path.\n    - **Behavior Tab:** Includes controls for `AutoSaveInterval` (with numeric validation) and a `RememberWindowPosition` checkbox.\n4. **Form Logic & Integration:** Implement robust form logic including input validation, change tracking with unsaved changes warnings, and a 'Reset to Defaults' button. Integrate the form into the `MainForm` via a 'Settings' item in the 'Tools' menu. Ensure settings are saved to `user.config` and themes are applied immediately upon saving and on application startup.",
        "testStrategy": "1. **Startup & Defaults:** Verify the application loads with the default theme and settings. Check logs for theme application confirmation.\n2. **UI Access & Theming:** Access the settings form via 'Tools > Settings'. Confirm the form and all its controls (tabs, comboboxes, etc.) are correctly themed.\n3. **Settings Modification & Validation:**\n    - Change the theme and verify it's applied immediately to all open forms.\n    - Set a new default export path and confirm the export dialog uses this new path.\n    - Test validation for the auto-save interval (e.g., non-numeric, out-of-range values).\n    - Toggle 'Remember window position', restart the app, and verify the main window's position is restored correctly.\n4. **Persistence:** After changing all settings, close and restart the application. Verify all changes have been persisted and are correctly loaded and applied.\n5. **Reset Functionality:** Use the 'Reset to Defaults' button and confirm all settings revert to their initial state in the UI and are saved correctly.",
        "subtasks": [
          {
            "id": "subtask-8-1",
            "description": "Create persistent user settings infrastructure for Theme, DefaultExportPath, AutoSaveInterval, and RememberWindowPosition.",
            "status": "done"
          },
          {
            "id": "subtask-8-2",
            "description": "Implement a comprehensive ThemeManager service for recursive theme application across all forms and controls.",
            "status": "done"
          },
          {
            "id": "subtask-8-3",
            "description": "Design and build the SettingsForm UI with a tabbed interface for Appearance, Paths, and Behavior.",
            "status": "done"
          },
          {
            "id": "subtask-8-4",
            "description": "Implement form logic including validation, change tracking, unsaved changes warnings, and a 'Reset to Defaults' feature.",
            "status": "done"
          },
          {
            "id": "subtask-8-5",
            "description": "Integrate the SettingsForm into the MainForm via the Tools menu and ensure theme is applied on startup.",
            "status": "done"
          },
          {
            "id": "subtask-8-6",
            "description": "Verify persistence, validation, and theme application through comprehensive testing.",
            "status": "done"
          }
        ]
      },
      {
        "id": 9,
        "title": "Set Up Global Error Handling and Logging",
        "description": "Implemented a robust global error handling and structured logging system to ensure application stability and provide comprehensive diagnostics for troubleshooting. The system is fully integrated and tested.",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "medium",
        "details": "1. **Serilog Integration**: Added Serilog with a file sink for structured logging to rolling daily log files (`logs/log-YYYYMMDD.txt`).\n2. **LoggingService**: Created a centralized `LoggingService` with methods for different log levels (Error, Warning, Information, Debug, Fatal).\n3. **GlobalExceptionHandler**: Implemented a comprehensive global exception handler for both UI thread (`Application.ThreadException`) and non-UI thread (`AppDomain.CurrentDomain.UnhandledException`) exceptions.\n4. **ErrorDialog**: Created a user-friendly `ErrorDialog` with options to show/hide technical details and copy error information to the clipboard.\n5. **Program.cs Integration**: Updated the main entry point (`Program.cs`) to initialize the logging and exception handling systems before the application starts.\n6. **Test Menu**: Added a \"Test Exception\" menu item under the \"Tools\" menu for easy testing of the exception handling system.",
        "testStrategy": "Testing was performed by using the 'Test Exception' menu item and by observing behavior during known issues (e.g., Chart control dependency). Verification confirmed that:\n- Application startup and shutdown are properly logged with timestamps.\n- The global exception handler successfully catches and logs all unhandled exceptions.\n- Log files are created with the correct rolling daily format (`log-YYYYMMDD.txt`).\n- The `ErrorDialog` is displayed correctly, providing user-friendly error reporting.\n- The application remains stable and continues running after non-fatal exceptions are handled.",
        "subtasks": [
          {
            "id": "subtask-9-1",
            "description": "Integrate Serilog for structured file logging to rolling daily files.",
            "status": "done"
          },
          {
            "id": "subtask-9-2",
            "description": "Create a centralized LoggingService for standardized log entries.",
            "status": "done"
          },
          {
            "id": "subtask-9-3",
            "description": "Implement global exception handlers for UI and non-UI threads.",
            "status": "done"
          },
          {
            "id": "subtask-9-4",
            "description": "Design and implement a user-friendly ErrorDialog with details and copy functionality.",
            "status": "done"
          },
          {
            "id": "subtask-9-5",
            "description": "Initialize logging and exception handling in Program.cs on application startup.",
            "status": "done"
          },
          {
            "id": "subtask-9-6",
            "description": "Add a 'Test Exception' menu item for verification purposes.",
            "status": "done"
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement Data Import, Backup, and Restore Utilities",
        "description": "Implement data utility features, including CSV data import for customers and orders, and a simple database backup and restore mechanism.",
        "details": "1. **CSV Import**: Create an import wizard form. Use a library like `CsvHelper` to read a `.csv` file. Display the parsed data in a preview grid. Allow the user to map CSV columns to entity properties. On confirmation, perform a bulk insert into the database within a single EF Core transaction. 2. **Backup**: Implement a 'Backup Database' menu item. On click, prompt the user for a location and copy the `data.db` file to a timestamped `.bak` file (e.g., `backup-202407301200.bak`). 3. **Restore**: Implement a 'Restore Database' menu item. Show a strong warning confirmation dialog. On confirmation, close the current database connection, overwrite `data.db` with a selected `.bak` file, and restart the application or re-initialize the database context.",
        "testStrategy": "Create sample CSV files for customers and orders. Test the import process, including error handling for invalid data rows. Test the backup function and verify the `.bak` file is created. Test the restore function by making changes, restoring from the backup, and verifying the changes are reverted.",
        "priority": "low",
        "dependencies": [
          2,
          4,
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Develop CSV Import Wizard",
            "description": "Develop the CSV import wizard for parsing and column mapping.",
            "dependencies": [],
            "details": "Create a multi-step user interface that guides the user through uploading a CSV file, previewing the data, and mapping the CSV columns to the target database table fields. This includes handling file parsing, delimiter detection, and providing a clear mapping interface.\n<info added on 2025-06-30T04:01:52.337Z>\nProgress Update: Successfully implemented core CSV import/export infrastructure:\n\nCOMPLETED:\n- DTOs for CustomerImportDto and OrderImportDto with CsvHelper attributes\n- CsvImportService with validation, customer/order parsing, and bulk save operations\n- DatabaseBackupService with SQLite backup/restore and CSV export functionality\n- CsvImportWizardForm with multi-step wizard UI (file selection, preview, import, completion)\n- Fixed all logging calls to use static LoggingService\n- Updated all repository method calls to correct names (GetAllAsync, AddAsync, GetByIdAsync)\n\nIN PROGRESS:\n- DataUtilitiesForm implementation (needs designer file and settings integration)\n- Main form integration for launching import/export features\n\nThe core import/export engine is fully functional. The wizard form provides professional UI with validation preview, error reporting, and progress tracking. The backup service handles SQLite database backups with timestamped files and safe restore operations.\n\nNext: Complete UI forms and integrate with main application.\n</info added on 2025-06-30T04:01:52.337Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Transactional Bulk Insert Logic",
            "description": "Implement the transactional bulk insert logic for the import feature.",
            "dependencies": [
              1
            ],
            "details": "Develop the backend logic to process the mapped data from the import wizard. The entire insertion process must be wrapped in a single database transaction to ensure that if any record fails to import, the entire batch is rolled back, preventing partial data updates and maintaining data integrity.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Database Backup Utility",
            "description": "Implement the database backup utility.",
            "dependencies": [],
            "details": "Create a secure, administrator-only feature to generate a complete backup of the application database. The utility should create a timestamped backup file and store it in a pre-configured, secure location. This serves as a prerequisite for any restore functionality.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement High-Risk Database Restore Utility",
            "description": "Implement the high-risk database restore utility, including strong user warnings and application state management.",
            "dependencies": [
              3
            ],
            "details": "Build the functionality to restore the database from a selected backup file. This process must include strong, explicit warnings about the irreversible nature of the action and require multiple user confirmations. The application must be put into a maintenance state during the restore to prevent data corruption.",
            "status": "done",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-06-29T19:12:46.716Z",
      "updated": "2025-06-30T04:16:41.817Z",
      "description": "Tasks for master context"
    }
  }
}